{"ast":null,"code":"var _jsxFileName = \"/Users/macbookair/Desktop/test skillwave/ReactJS-Spring-Boot-CRUD-Full-Stack-App/react-frontend/src/components/transaction/CreateTransactionComponent.jsx\";\nimport React, { Component } from 'react';\nimport BankAccountService from '../../services/BankAccountService';\nimport TransactionService from '../../services/TransactionService';\n\nclass CreateTransactionComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeBankAccountHandler = event => {\n      this.setState({\n        bankAccount: event.target.value\n      });\n    };\n\n    this.changeAmountHandler = event => {\n      this.setState({\n        amount: event.target.value.replace(/\\D/, '')\n      });\n    };\n\n    this.changeTypeHandler = event => {\n      this.setState({\n        type: event.target.value\n      });\n    };\n\n    this.saveOrUpdateTransaction = e => {\n      e.preventDefault();\n      let transaction = {\n        bankAccount: this.state.bankAccount,\n        amount: this.state.amount,\n        type: this.state.type\n      };\n      console.log('transaction => ' + JSON.stringify(transaction));\n      let bankAccountId = this.state.bankAccount;\n      BankAccountService.getBankAccountById(bankAccountId).then(res => {\n        let bankAccount = res.data;\n        this.setState({\n          bankAccount: bankAccount\n        });\n        this.setState({\n          bankName: res.data.bankName\n        });\n        let amountBank = bankAccount.amount;\n        let amountTransaction = this.state.amount;\n        let type = this.state.type;\n\n        if (type === 'Debit' && bankAccount.debit || type === 'Credit' && bankAccount.credit) {\n          if (amountBank >= amountTransaction) {\n            console.log('bankAccount => ' + JSON.stringify(bankAccount));\n            bankAccount.amount = amountBank - amountTransaction;\n            BankAccountService.updateBankAccount(bankAccount, bankAccount.id).then(res => {\n              console.log('Bank Account updated successfully');\n              this.setState({\n                bankAccount: res.data\n              });\n              this.setState({\n                status: 'Success'\n              });\n              transaction = {\n                bankAccount: this.state.bankAccount,\n                bankName: this.state.bankName,\n                amount: this.state.amount,\n                type: this.state.type,\n                status: this.state.status\n              };\n              TransactionService.addTransaction(bankAccountId, transaction).then(res => {\n                console.log('transaction => ' + JSON.stringify(res));\n                this.props.history.push('/transactions');\n              });\n            });\n          } else {\n            this.setState({\n              status: 'Failure - Not enough money'\n            });\n            transaction = {\n              bankAccount: this.state.bankAccount,\n              bankName: this.state.bankName,\n              amount: this.state.amount,\n              type: this.state.type,\n              status: this.state.status\n            };\n            TransactionService.addTransaction(bankAccountId, transaction).then(res => {\n              console.log('transaction => ' + JSON.stringify(res));\n              this.props.history.push('/transactions');\n            });\n          }\n        } else {\n          this.setState({\n            status: 'Failure - Payment not available'\n          });\n          transaction = {\n            bankAccount: this.state.bankAccount,\n            bankName: this.state.bankName,\n            amount: this.state.amount,\n            type: this.state.type,\n            status: this.state.status\n          };\n          TransactionService.addTransaction(bankAccountId, transaction).then(res => {\n            console.log('transaction => ' + JSON.stringify(res));\n            this.props.history.push('/transactions');\n          });\n        }\n      });\n    };\n\n    this.state = {\n      id: this.props.match.params.id,\n      bankAccount: '',\n      bankName: '',\n      amount: '',\n      type: '',\n      status: '',\n      listBankAccounts: []\n    };\n    this.changeBankAccountHandler = this.changeBankAccountHandler.bind(this);\n    this.changeAmountHandler = this.changeAmountHandler.bind(this);\n    this.changeTypeHandler = this.changeTypeHandler.bind(this);\n    this.saveOrUpdateTransaction = this.saveOrUpdateTransaction.bind(this);\n  }\n\n  componentDidMount() {\n    BankAccountService.getAllBankAccounts().then(res => {\n      let listBankAccounts = res.data;\n      this.setState({\n        listBankAccounts: listBankAccounts\n      });\n    });\n  }\n\n  cancel() {\n    this.props.history.push('/transactions');\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }, \"Create Transaction\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 20\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card col-md-6 offset-md-3 offset-md-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 45\n      }\n    }, \" Bank Name: \"), /*#__PURE__*/React.createElement(\"select\", {\n      placeholder: \"Select Bank Account\",\n      name: \"bankAccount\",\n      className: \"form-control\",\n      value: this.state.bankAccount,\n      onChange: this.changeBankAccountHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Select Bank Account\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 49\n      }\n    }), this.state.listBankAccounts.map(bankAccount => /*#__PURE__*/React.createElement(\"option\", {\n      key: bankAccount.id,\n      value: bankAccount.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 53\n      }\n    }, bankAccount.bankName)))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 45\n      }\n    }, \" Amount: \"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      pattern: \"[0-9]*\",\n      placeholder: \"Amount\",\n      name: \"amount\",\n      className: \"form-control\",\n      value: this.state.amount,\n      onChange: this.changeAmountHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 45\n      }\n    }, \" Type: \"), /*#__PURE__*/React.createElement(\"div\", {\n      onChange: this.changeTypeHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"radio\",\n      value: \"Debit\",\n      name: \"type\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 49\n      }\n    }), \" Debit\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"radio\",\n      value: \"Credit\",\n      name: \"type\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 49\n      }\n    }), \" Credit\")), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-success\",\n      onClick: this.saveOrUpdateTransaction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 41\n      }\n    }, \"Save\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-danger\",\n      onClick: this.cancel.bind(this),\n      style: {\n        marginLeft: \"10px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 41\n      }\n    }, \"Cancel\")))))));\n  }\n\n}\n\nexport default CreateTransactionComponent;","map":{"version":3,"sources":["/Users/macbookair/Desktop/test skillwave/ReactJS-Spring-Boot-CRUD-Full-Stack-App/react-frontend/src/components/transaction/CreateTransactionComponent.jsx"],"names":["React","Component","BankAccountService","TransactionService","CreateTransactionComponent","constructor","props","changeBankAccountHandler","event","setState","bankAccount","target","value","changeAmountHandler","amount","replace","changeTypeHandler","type","saveOrUpdateTransaction","e","preventDefault","transaction","state","console","log","JSON","stringify","bankAccountId","getBankAccountById","then","res","data","bankName","amountBank","amountTransaction","debit","credit","updateBankAccount","id","status","addTransaction","history","push","match","params","listBankAccounts","bind","componentDidMount","getAllBankAccounts","cancel","render","map","marginLeft"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport BankAccountService from '../../services/BankAccountService'\nimport TransactionService from '../../services/TransactionService'\n\nclass CreateTransactionComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            id: this.props.match.params.id,\n            bankAccount: '',\n            bankName: '',\n            amount: '',\n            type: '',\n            status: '',\n            listBankAccounts: []\n        }\n        this.changeBankAccountHandler = this.changeBankAccountHandler.bind(this);\n        this.changeAmountHandler = this.changeAmountHandler.bind(this);\n        this.changeTypeHandler = this.changeTypeHandler.bind(this);\n        this.saveOrUpdateTransaction = this.saveOrUpdateTransaction.bind(this);\n    }\n\n    componentDidMount(){\n        BankAccountService.getAllBankAccounts().then( (res) =>{\n            let listBankAccounts = res.data;\n            this.setState({\n                listBankAccounts: listBankAccounts\n            });\n        });       \n    }\n    \n    changeBankAccountHandler= (event) => {\n        this.setState({bankAccount: event.target.value});\n    }\n\n    changeAmountHandler= (event) => {\n        this.setState({amount: event.target.value.replace(/\\D/,'')});\n    }\n\n    changeTypeHandler= (event) => {\n        this.setState({type: event.target.value});\n    }\n\n    cancel(){\n        this.props.history.push('/transactions');\n    }\n\n    saveOrUpdateTransaction = (e) => {\n        e.preventDefault();\n        let transaction = {bankAccount: this.state.bankAccount, amount: this.state.amount, type: this.state.type};\n        console.log('transaction => ' + JSON.stringify(transaction));\n        let bankAccountId = this.state.bankAccount;\n        BankAccountService.getBankAccountById(bankAccountId).then( res => {\n            let bankAccount = res.data;\n            this.setState({bankAccount: bankAccount});\n            this.setState({bankName: res.data.bankName});\n            let amountBank = bankAccount.amount;\n            let amountTransaction = this.state.amount;\n            let type = this.state.type;\n            if ((type === 'Debit' && bankAccount.debit) || (type === 'Credit' && bankAccount.credit)) {\n                if (amountBank >= amountTransaction) {\n                    console.log('bankAccount => ' + JSON.stringify(bankAccount));\n                    bankAccount.amount = amountBank - amountTransaction;\n\n                    BankAccountService.updateBankAccount(bankAccount, bankAccount.id).then( res => {\n                        console.log('Bank Account updated successfully');\n                        this.setState({bankAccount: res.data});\n                        this.setState({status: 'Success'});\n                        transaction = {bankAccount: this.state.bankAccount, bankName: this.state.bankName, amount: this.state.amount, type: this.state.type, status: this.state.status};\n                        TransactionService.addTransaction(bankAccountId,transaction).then(res =>{\n                            console.log('transaction => ' + JSON.stringify(res));\n                            this.props.history.push('/transactions');\n                        });\n                    });\n                }else{\n                    this.setState({status: 'Failure - Not enough money'});\n                    transaction = {bankAccount: this.state.bankAccount, bankName: this.state.bankName, amount: this.state.amount, type: this.state.type, status: this.state.status};\n                    TransactionService.addTransaction(bankAccountId,transaction).then(res =>{\n                        console.log('transaction => ' + JSON.stringify(res));\n                        this.props.history.push('/transactions');\n                    });\n                }\n            }else{\n                this.setState({status: 'Failure - Payment not available'});\n                transaction = {bankAccount: this.state.bankAccount, bankName: this.state.bankName, amount: this.state.amount, type: this.state.type, status: this.state.status};\n                TransactionService.addTransaction(bankAccountId,transaction).then(res =>{\n                    console.log('transaction => ' + JSON.stringify(res));\n                    this.props.history.push('/transactions');\n                });\n            }\n        })\n        \n        \n    }\n\n    render() {\n        return (\n            <div>\n                <h2 className=\"text-center\">Create Transaction</h2>\n                <br></br>\n                   <div className = \"container\">\n                        <div className = \"row\">\n                            <div className = \"card col-md-6 offset-md-3 offset-md-3\">\n                                <div className = \"card-body\">\n                                    <form>\n                                        <div className = \"form-group\">\n                                            <label> Bank Name: </label>\n                                            <select placeholder=\"Select Bank Account\" name=\"bankAccount\" className=\"form-control\" \n                                                value={this.state.bankAccount} onChange={this.changeBankAccountHandler}>\n                                                <option value=\"Select Bank Account\"></option>\n                                                {this.state.listBankAccounts.map(bankAccount => (\n                                                    <option key={bankAccount.id} value={bankAccount.id}>\n                                                        {bankAccount.bankName}\n                                                    </option>\n                                                    ))}\n                                            </select>\n                                        </div>\n                                        <div className = \"form-group\">\n                                            <label> Amount: </label>\n                                            <input type=\"text\" pattern=\"[0-9]*\" placeholder=\"Amount\" name=\"amount\" className=\"form-control\" \n                                                value={this.state.amount} onChange={this.changeAmountHandler}/>\n                                        </div>\n                                        <div className = \"form-group\">\n                                            <label> Type: </label>\n                                            <div onChange={this.changeTypeHandler}>\n                                                <input type=\"radio\" value=\"Debit\" name=\"type\"/> Debit\n                                                <br></br>\n                                                <input type=\"radio\" value=\"Credit\" name=\"type\"/> Credit\n                                            </div>\n                                        </div>\n\n                                        <button className=\"btn btn-success\" onClick={this.saveOrUpdateTransaction}>Save</button>\n                                        <button className=\"btn btn-danger\" onClick={this.cancel.bind(this)} style={{marginLeft: \"10px\"}}>Cancel</button>\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n\n                   </div>\n            </div>\n        )\n    }\n}\n\nexport default CreateTransactionComponent\n"]},"metadata":{},"sourceType":"module"}